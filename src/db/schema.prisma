generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  displayName          String?
  studyStyle           StudyStyle       @default(READING)
  dailyStudyTime       Int              @default(60)
  streakCount          Int              @default(0)
  lastActive           DateTime         @default(now())
  billingEmail         String?
  billingStatus        BillingStatus    @default(PENDING)
  dailyGenerationsUsed Int              @default(0)
  lastGenerationReset  DateTime         @default(now())
  planEndDate          DateTime?
  planStartDate        DateTime?
  planType             PlanType         @default(FREE)
  createAt             DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt
  billingRequests      BillingRequest[]
  notes                Note[]
  studyLogs            StudyLog[]
  studyPlans           StudyPlan[]
  subjects             Subject[]
  usageLogs            UsageLog[]
}

model Subject {
  id            String      @id @default(uuid())
  userId        String
  name          String
  examDate      DateTime?
  quizFrequency Int         @default(7)
  createAt      DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  notes         Note[]
  studyLogs     StudyLog[]
  studyPlans    StudyPlan[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id         String     @id @default(uuid())
  title      String     @default("Untitled Note")
  text       String
  sourceType SourceType @default(MANUAL)
  pdfUrl     String?
  authorId   String
  subjectId  String?
  createAt   DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subject    Subject?   @relation(fields: [subjectId], references: [id])
  studyLogs  StudyLog[]
}

model StudyLog {
  id         String     @id @default(uuid())
  userId     String
  subjectId  String?
  noteId     String?
  actionType ActionType
  timestamp  DateTime   @default(now())
  note       Note?      @relation(fields: [noteId], references: [id])
  subject    Subject?   @relation(fields: [subjectId], references: [id])
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudyPlan {
  id        String   @id @default(uuid())
  userId    String
  subjectId String?
  planData  Json
  createAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  subject   Subject? @relation(fields: [subjectId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BillingRequest {
  id         String               @id @default(uuid())
  userId     String
  planType   PlanType
  email      String
  status     BillingRequestStatus @default(PENDING)
  adminNotes String?
  createAt   DateTime             @default(now())
  updatedAt  DateTime             @default(now()) @updatedAt
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id         String   @id @default(uuid())
  userId     String
  actionType String
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Motivation {
  id     String @id @default(uuid())
  quote  String
  author String
}

enum StudyStyle {
  VISUAL
  READING
  PRACTICE
  TEACHING
  AUDIO
}

enum SourceType {
  MANUAL
  PDF
  HANDWRITTEN
}

enum ActionType {
  NOTE_CREATED
  NOTE_UPDATED
  QUIZ_TAKEN
  STUDY_PLAN_CREATED
  STUDY_PLAN_COMPLETED
  SUBJECT_VIEWED
  AI_SUMMARY
  AI_QUIZ
  AI_CONCEPT_MAP
}

enum PlanType {
  FREE
  BASIC
  PREMIUM
}

enum BillingStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum BillingRequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
